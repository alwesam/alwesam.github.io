<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[VanDevSam]]></title>
  <link href="http://alwesam.github.io/atom.xml" rel="self"/>
  <link href="http://alwesam.github.io/"/>
  <updated>2017-11-27T17:24:01-08:00</updated>
  <id>http://alwesam.github.io/</id>
  <author>
    <name><![CDATA[Wesam Al-Haddad]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Running Multiple Background Jobs and Accessing I/O]]></title>
    <link href="http://alwesam.github.io/blog/2017/11/07/running-multiple-background-jobs-and-accessing-i-slash-o/"/>
    <updated>2017-11-07T11:38:00-08:00</updated>
    <id>http://alwesam.github.io/blog/2017/11/07/running-multiple-background-jobs-and-accessing-i-slash-o</id>
    <content type="html"><![CDATA[<p>One of the features of the application I have been working on is to
automatically transfer funds via EFT between users.  The payment process of
initiating debit/credit transactions involves uploading a file of transactions
through batch payment API to the payment gateway.  Each line in the file
constitute a transaction.</p>

<p>Since there is a cap on the total dollar amount in each batch API upload,
several batches are to be uploaded and fired.  Problem is that the payment
gateway server cannot handle multiple API requests in rapid succession. Assuming
a batch limit of 50,000 and a total amount of 20 million, that is about 400
batches that need to be processed!</p>

<h3>Enter Background Job</h3>

<p>When batches are created, each is put through a background job in
order to complete an API request. Each job takes in an array of transactions
and creates a file on the fly (which is written to a tmp/ directory); the file
is subsequently uploaded through the API request.</p>

<p>Each job constitutes its own thread yet they access the same I/O. More likely
than not, unless the jobs' execution is throttled, subsequent job processing
will fail to complete as the server is busy.  Suppose that we want to throttle
the API request at 1 request/minute; that means 400 minutes or 7 hours required
to upload all batches for 20 million.  At 1 request/30 seconds, less than 4
hours is required. Yet, we might do better if we do not manually throttle the
API requests and let it the processor determine the throttle (more to discuss later).</p>

<p>Furthermore, each job is accessing the tmp/ directory to write/upload the batch
file.  To prevent cross-contamination/overwriting, files' name should include with job
id and the datetime (down to milliseconds).</p>

<p>  <em>Writing to tmp/ is very quick. Writing 400 batch files of 25 lines each in
rapid loop takes less than 170ms. Writing a single file much less than 1ms. It&rsquo;s
during the upload that the file risks being overwritten or contaminated if it&rsquo;s
not uniquely identified with a precise time stamp or (better) a unique
identifier</em>.</p>

<p>Another option is to have the batch files created before and sending the files'
path as arguments to the background jobs.  The main advantages of this approach
is to minimize the risk of cross-contamination of multiple job threads write
accessing the tmp/ directory as well as not having to regenerate the file (with
a different timestamp) every time the job fails. The disadvantage of this
approach is the job thread doesn&rsquo;t hold onto the transactions data and it
has to relay on the tmp directory keeping the file saved while retrying the job
several times after failure.</p>

<h3>Sidekiq</h3>

<p><a href="https://github.com/mperham/sidekiq">Sidekiq</a> is employed to manage multiple
HTTP file uploads in the background.  It&rsquo;s noted for speed in comparison to
Delayed Job (4,500 jobs/second and a latency of 10ms). In addition, Sidekiq uses
Redis for queuing jobs as opposed to using the database.</p>

<h5>To-do list:</h5>

<!--
* Default of 25 threads per process (concurrency in ruby is not exactly
supported)
* Sidekiq is designed for parallel execution so design your jobs so you can run
lots of them in parallel. It has basic features for tuning concurrency (e.g.
targeting a sidekiq process at a queue with a defined number of threads) but
your system architecture is much simpler if you don't have such specialization.
Set at 20 in production and 5 in development
* Automatic job retry at (retry_count ** 4)+15+(rand(30)*(retry_count+1)).  For
example, at the 6th retry will occur between 640 and 820 seconds after the 5th
retry. -->


<ul>
<li>Custom middleware needed to fetch #job_id and retry_count.</li>
<li>Also need to customize retry time depending on job so to make them apart based
on job id</li>
<li>Limit number of pool connections for batch API upload job (go down from
default of 25 to 5 or even to 1)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Do Things Better]]></title>
    <link href="http://alwesam.github.io/blog/2017/11/03/how-to-improve-performance/"/>
    <updated>2017-11-03T19:36:17-07:00</updated>
    <id>http://alwesam.github.io/blog/2017/11/03/how-to-improve-performance</id>
    <content type="html"><![CDATA[<p>When going about an activity, we spend our time in two zones:</p>

<ul>
<li>Learning Zone</li>
<li>Performance Zone</li>
</ul>


<p><a href="http://www.youtube.com/watch?feature=player_embedded&v=KaiwGb0csas
" target="_blank"><img src="http://img.youtube.com/vi/KaiwGb0csas/0.jpg"
alt="TED presentation" width="440" height="380" border="10" /></a></p>

<p>Practically, most of the time is spent in the performance zone.  When learning
stops, stagnation follows.</p>

<p>Let&rsquo;s take learning a programming language or a technology stack in general.  We spent few
weeks or months learning the ropes, but once we undertake a project with a
deadline, we tend to stick to what we know.  Miskakes are not allowed and even
in that case, we don&rsquo;t have the time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Am I Intending to Write About on This Blog]]></title>
    <link href="http://alwesam.github.io/blog/2017/10/28/what-im-intending-to-write-about/"/>
    <updated>2017-10-28T17:53:50-07:00</updated>
    <id>http://alwesam.github.io/blog/2017/10/28/what-im-intending-to-write-about</id>
    <content type="html"><![CDATA[<p>Putting down my scribbles on a blog (or a piece of paper) has been in my
thoughts for a good while.  Here are some of the subjects I plan to write on:</p>

<ul>
<li>Software Development</li>
<li>Ruby (and Rails)</li>
<li>Vancouver tech scene</li>
<li>Technology in general</li>
</ul>

]]></content>
  </entry>
  
</feed>
